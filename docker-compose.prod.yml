services:
  postgres:
    image: postgis/postgis:15-3.4
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-sukimise}
      POSTGRES_USER: ${POSTGRES_USER:-sukimise_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-sukimise_user} -d ${POSTGRES_DB:-sukimise}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    # PostgreSQL is internal only - no external port exposure

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    # Backend is internal only in production
    expose:
      - "${BACKEND_PORT:-8080}"
    environment:
      DATABASE_URL: ${DATABASE_URL}
      JWT_SECRET: ${JWT_SECRET}
      PORT: ${BACKEND_PORT:-8080}
      HOST: 0.0.0.0
      ENVIRONMENT: production
      ADMIN_USERS: ${ADMIN_USERS}
      EDITOR_USERS: ${EDITOR_USERS}
      CORS_ALLOWED_ORIGINS: ${CORS_ALLOWED_ORIGINS}
      CORS_ALLOW_CREDENTIALS: ${CORS_ALLOW_CREDENTIALS:-true}
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - uploads_data:/app/uploads
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:${BACKEND_PORT:-8080}/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  discord-bot:
    image: golang:1.23-alpine
    ports:
      - "${BOT_PORT:-8082}:${BOT_PORT:-8082}"
    environment:
      DATABASE_URL: ${DATABASE_URL:-postgres://sukimise_user:sukimise_password@postgres:5432/sukimise?sslmode=disable}
      SUKIMISE_API_URL: ${SUKIMISE_API_URL:-http://backend:8080}
      DISCORD_TOKEN: ${DISCORD_TOKEN}
      GOOGLE_MAPS_API_KEY: ${GOOGLE_MAPS_API_KEY}
      BOT_PORT: ${BOT_PORT:-8082}
      CGO_ENABLED: 0
      ENVIRONMENT: production
    depends_on:
      postgres:
        condition: service_healthy
      backend:
        condition: service_healthy
    volumes:
      - ./discord-bot:/app
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:${BOT_PORT:-8082}/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend + Reverse Proxy (nginx) - Build and serve static files
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
      args:
        - VITE_API_BASE_URL=
    ports:
      - "${PORT:-80}:80"
    environment:
      - BACKEND_HOST=backend
      - BACKEND_PORT=${BACKEND_PORT:-8080}
    depends_on:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
  uploads_data:
