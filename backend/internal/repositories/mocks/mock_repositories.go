// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go
//
// Generated by this command:
//
//	mockgen -source=interfaces.go -destination=mocks/mock_repositories.go
//

// Package mock_repositories is a generated GoMock package.
package mock_repositories

import (
	reflect "reflect"
	models "sukimise/internal/models"
	repositories "sukimise/internal/repositories"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockStoreRepositoryInterface is a mock of StoreRepositoryInterface interface.
type MockStoreRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockStoreRepositoryInterfaceMockRecorder
	isgomock struct{}
}

// MockStoreRepositoryInterfaceMockRecorder is the mock recorder for MockStoreRepositoryInterface.
type MockStoreRepositoryInterfaceMockRecorder struct {
	mock *MockStoreRepositoryInterface
}

// NewMockStoreRepositoryInterface creates a new mock instance.
func NewMockStoreRepositoryInterface(ctrl *gomock.Controller) *MockStoreRepositoryInterface {
	mock := &MockStoreRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockStoreRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStoreRepositoryInterface) EXPECT() *MockStoreRepositoryInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockStoreRepositoryInterface) Create(store *models.Store) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", store)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockStoreRepositoryInterfaceMockRecorder) Create(store any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockStoreRepositoryInterface)(nil).Create), store)
}

// Delete mocks base method.
func (m *MockStoreRepositoryInterface) Delete(id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockStoreRepositoryInterfaceMockRecorder) Delete(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockStoreRepositoryInterface)(nil).Delete), id)
}

// GetAll mocks base method.
func (m *MockStoreRepositoryInterface) GetAll(filter *repositories.StoreFilter) ([]*models.Store, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", filter)
	ret0, _ := ret[0].([]*models.Store)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockStoreRepositoryInterfaceMockRecorder) GetAll(filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockStoreRepositoryInterface)(nil).GetAll), filter)
}

// GetAllCategories mocks base method.
func (m *MockStoreRepositoryInterface) GetAllCategories() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCategories")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCategories indicates an expected call of GetAllCategories.
func (mr *MockStoreRepositoryInterfaceMockRecorder) GetAllCategories() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCategories", reflect.TypeOf((*MockStoreRepositoryInterface)(nil).GetAllCategories))
}

// GetAllTags mocks base method.
func (m *MockStoreRepositoryInterface) GetAllTags() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllTags")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllTags indicates an expected call of GetAllTags.
func (mr *MockStoreRepositoryInterfaceMockRecorder) GetAllTags() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTags", reflect.TypeOf((*MockStoreRepositoryInterface)(nil).GetAllTags))
}

// GetByID mocks base method.
func (m *MockStoreRepositoryInterface) GetByID(id uuid.UUID) (*models.Store, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", id)
	ret0, _ := ret[0].(*models.Store)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockStoreRepositoryInterfaceMockRecorder) GetByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockStoreRepositoryInterface)(nil).GetByID), id)
}

// Update mocks base method.
func (m *MockStoreRepositoryInterface) Update(store *models.Store) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", store)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockStoreRepositoryInterfaceMockRecorder) Update(store any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockStoreRepositoryInterface)(nil).Update), store)
}

// MockUserRepositoryInterface is a mock of UserRepositoryInterface interface.
type MockUserRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryInterfaceMockRecorder
	isgomock struct{}
}

// MockUserRepositoryInterfaceMockRecorder is the mock recorder for MockUserRepositoryInterface.
type MockUserRepositoryInterfaceMockRecorder struct {
	mock *MockUserRepositoryInterface
}

// NewMockUserRepositoryInterface creates a new mock instance.
func NewMockUserRepositoryInterface(ctrl *gomock.Controller) *MockUserRepositoryInterface {
	mock := &MockUserRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepositoryInterface) EXPECT() *MockUserRepositoryInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUserRepositoryInterface) Create(user *models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockUserRepositoryInterfaceMockRecorder) Create(user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserRepositoryInterface)(nil).Create), user)
}

// Delete mocks base method.
func (m *MockUserRepositoryInterface) Delete(id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockUserRepositoryInterfaceMockRecorder) Delete(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUserRepositoryInterface)(nil).Delete), id)
}

// GetAll mocks base method.
func (m *MockUserRepositoryInterface) GetAll() ([]*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockUserRepositoryInterfaceMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockUserRepositoryInterface)(nil).GetAll))
}

// GetByEmail mocks base method.
func (m *MockUserRepositoryInterface) GetByEmail(email string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByEmail", email)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByEmail indicates an expected call of GetByEmail.
func (mr *MockUserRepositoryInterfaceMockRecorder) GetByEmail(email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByEmail", reflect.TypeOf((*MockUserRepositoryInterface)(nil).GetByEmail), email)
}

// GetByID mocks base method.
func (m *MockUserRepositoryInterface) GetByID(id uuid.UUID) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", id)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockUserRepositoryInterfaceMockRecorder) GetByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockUserRepositoryInterface)(nil).GetByID), id)
}

// GetByUsername mocks base method.
func (m *MockUserRepositoryInterface) GetByUsername(username string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUsername", username)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUsername indicates an expected call of GetByUsername.
func (mr *MockUserRepositoryInterfaceMockRecorder) GetByUsername(username any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUsername", reflect.TypeOf((*MockUserRepositoryInterface)(nil).GetByUsername), username)
}

// Update mocks base method.
func (m *MockUserRepositoryInterface) Update(user *models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockUserRepositoryInterfaceMockRecorder) Update(user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUserRepositoryInterface)(nil).Update), user)
}

// MockReviewRepositoryInterface is a mock of ReviewRepositoryInterface interface.
type MockReviewRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockReviewRepositoryInterfaceMockRecorder
	isgomock struct{}
}

// MockReviewRepositoryInterfaceMockRecorder is the mock recorder for MockReviewRepositoryInterface.
type MockReviewRepositoryInterfaceMockRecorder struct {
	mock *MockReviewRepositoryInterface
}

// NewMockReviewRepositoryInterface creates a new mock instance.
func NewMockReviewRepositoryInterface(ctrl *gomock.Controller) *MockReviewRepositoryInterface {
	mock := &MockReviewRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockReviewRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReviewRepositoryInterface) EXPECT() *MockReviewRepositoryInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockReviewRepositoryInterface) Create(review *models.Review) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", review)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockReviewRepositoryInterfaceMockRecorder) Create(review any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockReviewRepositoryInterface)(nil).Create), review)
}

// Delete mocks base method.
func (m *MockReviewRepositoryInterface) Delete(id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockReviewRepositoryInterfaceMockRecorder) Delete(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockReviewRepositoryInterface)(nil).Delete), id)
}

// GetByID mocks base method.
func (m *MockReviewRepositoryInterface) GetByID(id uuid.UUID) (*models.Review, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", id)
	ret0, _ := ret[0].(*models.Review)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockReviewRepositoryInterfaceMockRecorder) GetByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockReviewRepositoryInterface)(nil).GetByID), id)
}

// GetByStoreID mocks base method.
func (m *MockReviewRepositoryInterface) GetByStoreID(storeID uuid.UUID, limit, offset int) ([]*models.Review, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByStoreID", storeID, limit, offset)
	ret0, _ := ret[0].([]*models.Review)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetByStoreID indicates an expected call of GetByStoreID.
func (mr *MockReviewRepositoryInterfaceMockRecorder) GetByStoreID(storeID, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByStoreID", reflect.TypeOf((*MockReviewRepositoryInterface)(nil).GetByStoreID), storeID, limit, offset)
}

// GetByUserID mocks base method.
func (m *MockReviewRepositoryInterface) GetByUserID(userID uuid.UUID) ([]*models.Review, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUserID", userID)
	ret0, _ := ret[0].([]*models.Review)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUserID indicates an expected call of GetByUserID.
func (mr *MockReviewRepositoryInterfaceMockRecorder) GetByUserID(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUserID", reflect.TypeOf((*MockReviewRepositoryInterface)(nil).GetByUserID), userID)
}

// Update mocks base method.
func (m *MockReviewRepositoryInterface) Update(review *models.Review) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", review)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockReviewRepositoryInterfaceMockRecorder) Update(review any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockReviewRepositoryInterface)(nil).Update), review)
}

// MockViewerAuthRepositoryInterface is a mock of ViewerAuthRepositoryInterface interface.
type MockViewerAuthRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockViewerAuthRepositoryInterfaceMockRecorder
	isgomock struct{}
}

// MockViewerAuthRepositoryInterfaceMockRecorder is the mock recorder for MockViewerAuthRepositoryInterface.
type MockViewerAuthRepositoryInterfaceMockRecorder struct {
	mock *MockViewerAuthRepositoryInterface
}

// NewMockViewerAuthRepositoryInterface creates a new mock instance.
func NewMockViewerAuthRepositoryInterface(ctrl *gomock.Controller) *MockViewerAuthRepositoryInterface {
	mock := &MockViewerAuthRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockViewerAuthRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockViewerAuthRepositoryInterface) EXPECT() *MockViewerAuthRepositoryInterfaceMockRecorder {
	return m.recorder
}

// CleanupExpiredSessions mocks base method.
func (m *MockViewerAuthRepositoryInterface) CleanupExpiredSessions() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CleanupExpiredSessions")
	ret0, _ := ret[0].(error)
	return ret0
}

// CleanupExpiredSessions indicates an expected call of CleanupExpiredSessions.
func (mr *MockViewerAuthRepositoryInterfaceMockRecorder) CleanupExpiredSessions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanupExpiredSessions", reflect.TypeOf((*MockViewerAuthRepositoryInterface)(nil).CleanupExpiredSessions))
}

// CreateLoginHistory mocks base method.
func (m *MockViewerAuthRepositoryInterface) CreateLoginHistory(history *models.ViewerLoginHistory) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLoginHistory", history)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateLoginHistory indicates an expected call of CreateLoginHistory.
func (mr *MockViewerAuthRepositoryInterfaceMockRecorder) CreateLoginHistory(history any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLoginHistory", reflect.TypeOf((*MockViewerAuthRepositoryInterface)(nil).CreateLoginHistory), history)
}

// GetLoginHistory mocks base method.
func (m *MockViewerAuthRepositoryInterface) GetLoginHistory(limit, offset int) ([]*models.ViewerLoginHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoginHistory", limit, offset)
	ret0, _ := ret[0].([]*models.ViewerLoginHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLoginHistory indicates an expected call of GetLoginHistory.
func (mr *MockViewerAuthRepositoryInterfaceMockRecorder) GetLoginHistory(limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoginHistory", reflect.TypeOf((*MockViewerAuthRepositoryInterface)(nil).GetLoginHistory), limit, offset)
}

// GetValidSession mocks base method.
func (m *MockViewerAuthRepositoryInterface) GetValidSession(token string) (*models.ViewerLoginHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValidSession", token)
	ret0, _ := ret[0].(*models.ViewerLoginHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValidSession indicates an expected call of GetValidSession.
func (mr *MockViewerAuthRepositoryInterfaceMockRecorder) GetValidSession(token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValidSession", reflect.TypeOf((*MockViewerAuthRepositoryInterface)(nil).GetValidSession), token)
}

// GetViewerSettings mocks base method.
func (m *MockViewerAuthRepositoryInterface) GetViewerSettings() (*models.ViewerSettings, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetViewerSettings")
	ret0, _ := ret[0].(*models.ViewerSettings)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetViewerSettings indicates an expected call of GetViewerSettings.
func (mr *MockViewerAuthRepositoryInterfaceMockRecorder) GetViewerSettings() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetViewerSettings", reflect.TypeOf((*MockViewerAuthRepositoryInterface)(nil).GetViewerSettings))
}

// InvalidateSession mocks base method.
func (m *MockViewerAuthRepositoryInterface) InvalidateSession(token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InvalidateSession", token)
	ret0, _ := ret[0].(error)
	return ret0
}

// InvalidateSession indicates an expected call of InvalidateSession.
func (mr *MockViewerAuthRepositoryInterfaceMockRecorder) InvalidateSession(token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvalidateSession", reflect.TypeOf((*MockViewerAuthRepositoryInterface)(nil).InvalidateSession), token)
}

// UpdateViewerSettings mocks base method.
func (m *MockViewerAuthRepositoryInterface) UpdateViewerSettings(settings *models.ViewerSettings) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateViewerSettings", settings)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateViewerSettings indicates an expected call of UpdateViewerSettings.
func (mr *MockViewerAuthRepositoryInterfaceMockRecorder) UpdateViewerSettings(settings any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateViewerSettings", reflect.TypeOf((*MockViewerAuthRepositoryInterface)(nil).UpdateViewerSettings), settings)
}
